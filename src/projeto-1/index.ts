import * as readline from 'readline';

interface Categoria {
  id: number;
  nome: string;
  descricao: string;
  dataCriacao: Date;
}

interface Produto {
  id: number;
  nome: string;
  descricao: string;
  preco: number;
  quantidade: number;
  categoriaId: number;
  dataCriacao: Date;
  dataAtualizacao: Date;
}

let categorias: Categoria[] = [];
let produtos: Produto[] = [];

let categoriaId = 1;
let produtoId = 1;

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

function perguntar(pergunta: string): Promise<string> {
  return new Promise(resolve => rl.question(pergunta, resolve));
}

// --- Fun√ß√µes de Categoria ---
async function criarCategoria() {
  const nome = await perguntar("Nome da categoria: ");
  const descricao = await perguntar("Descri√ß√£o: ");
  categorias.push({
    id: categoriaId++,
    nome,
    descricao,
    dataCriacao: new Date(),
  });
  console.log("‚úÖ Categoria criada com sucesso!\n");
}

function listarCategorias() {
  console.log("\nüìÇ Categorias:");
  categorias.forEach(c => {
    console.log(`${c.id} - ${c.nome} | ${c.descricao} | Criada em: ${c.dataCriacao.toLocaleString()}`);
  });
}

async function buscarCategoria() {
  const termo = await perguntar("Buscar por ID ou Nome: ");
  const resultado = categorias.find(c => c.id === Number(termo) || c.nome.toLowerCase() === termo.toLowerCase());
  if (resultado) {
    console.log("Categoria encontrada:", resultado);
  } else {
    console.log("‚ùå Categoria n√£o encontrada.");
  }
}

async function atualizarCategoria() {
  const id = Number(await perguntar("ID da categoria: "));
  const categoria = categorias.find(c => c.id === id);
  if (!categoria) return console.log("‚ùå Categoria n√£o encontrada.");
  const nome = await perguntar("Novo nome: ");
  const descricao = await perguntar("Nova descri√ß√£o: ");
  categoria.nome = nome;
  categoria.descricao = descricao;
  console.log("‚úÖ Categoria atualizada.");
}

async function removerCategoria() {
  const id = Number(await perguntar("ID da categoria a remover: "));
  const possuiProdutos = produtos.some(p => p.categoriaId === id);
  if (possuiProdutos) return console.log("‚ùå N√£o √© poss√≠vel remover. H√° produtos associados.");
  categorias = categorias.filter(c => c.id !== id);
  console.log("‚úÖ Categoria removida.");
}

// --- Fun√ß√µes de Produto ---
async function criarProduto() {
  const nome = await perguntar("Nome do produto: ");
  const descricao = await perguntar("Descri√ß√£o: ");
  const preco = Number(await perguntar("Pre√ßo: "));
  const quantidade = Number(await perguntar("Quantidade: "));
  const categoriaId = Number(await perguntar("ID da categoria: "));
  const categoria = categorias.find(c => c.id === categoriaId);
  if (!categoria) return console.log("‚ùå Categoria n√£o encontrada.");
  produtos.push({
    id: produtoId++,
    nome,
    descricao,
    preco,
    quantidade,
    categoriaId,
    dataCriacao: new Date(),
    dataAtualizacao: new Date(),
  });
  console.log("‚úÖ Produto criado com sucesso!");
}

function listarProdutos() {
  console.log("\nüì¶ Produtos:");
  produtos.forEach(p => {
    const categoria = categorias.find(c => c.id === p.categoriaId);
    console.log(`${p.id} - ${p.nome} | R$${p.preco.toFixed(2)} | Qtd: ${p.quantidade} | Categoria: ${categoria?.nome}`);
  });
}

async function buscarProduto() {
  const termo = await perguntar("Buscar por ID, Nome ou Categoria: ").then(t => t.toLowerCase());
  const resultado = produtos.filter(p =>
    p.id === Number(termo) ||
    p.nome.toLowerCase().includes(termo) ||
    categorias.find(c => c.id === p.categoriaId && c.nome.toLowerCase().includes(termo))
  );
  if (resultado.length > 0) {
    resultado.forEach(p => console.log(p));
  } else {
    console.log("‚ùå Nenhum produto encontrado.");
  }
}

async function atualizarProduto() {
  const id = Number(await perguntar("ID do produto: "));
  const produto = produtos.find(p => p.id === id);
  if (!produto) return console.log("‚ùå Produto n√£o encontrado.");

  const nome = await perguntar("Novo nome: ");
  const descricao = await perguntar("Nova descri√ß√£o: ");
  const preco = Number(await perguntar("Novo pre√ßo: "));
  const quantidade = Number(await perguntar("Nova quantidade: "));

  produto.nome = nome;
  produto.descricao = descricao;
  produto.preco = preco;
  produto.quantidade = quantidade;
  produto.dataAtualizacao = new Date();

  console.log("‚úÖ Produto atualizado.");
}

async function removerProduto() {
  const id = Number(await perguntar("ID do produto a remover: "));
  produtos = produtos.filter(p => p.id !== id);
  console.log("‚úÖ Produto removido.");
}

// --- Menu ---
async function menu() {
  while (true) {
    console.log(`
==== MENU ====
1. Criar Categoria
2. Listar Categorias
3. Buscar Categoria
4. Atualizar Categoria
5. Remover Categoria
6. Criar Produto
7. Listar Produtos
8. Buscar Produto
9. Atualizar Produto
10. Remover Produto
0. Sair
    `);

    const opcao = await perguntar("Escolha uma op√ß√£o: ");

    switch (opcao) {
      case "1": await criarCategoria(); break;
      case "2": listarCategorias(); break;
      case "3": await buscarCategoria(); break;
      case "4": await atualizarCategoria(); break;
      case "5": await removerCategoria(); break;
      case "6": await criarProduto(); break;
      case "7": listarProdutos(); break;
      case "8": await buscarProduto(); break;
      case "9": await atualizarProduto(); break;
      case "10": await removerProduto(); break;
      case "0":
        rl.close();
        console.log("üëã Programa encerrado.");
        return;
      default: console.log("‚ùå Op√ß√£o inv√°lida.");
    }
  }
}

menu();
